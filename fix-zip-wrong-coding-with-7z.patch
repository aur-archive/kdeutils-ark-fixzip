--- ark-4.11.2.orig/plugins/clizipplugin/cliplugin.cpp
+++ ark-4.11.2/plugins/clizipplugin/cliplugin.cpp
@@ -17,26 +17,26 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ *
  */
 
 #include "cliplugin.h"
 #include "kerfuffle/cliinterface.h"
 #include "kerfuffle/kerfuffle_export.h"
 
-#include <KDebug>
-
 #include <QDateTime>
 #include <QDir>
 #include <QLatin1String>
-#include <QRegExp>
 #include <QString>
-#include <QStringList>
+
+#include <KDebug>
 
 using namespace Kerfuffle;
 
 CliPlugin::CliPlugin(QObject *parent, const QVariantList & args)
-    : CliInterface(parent, args)
-    , m_status(Header)
+        : CliInterface(parent, args)
+        , m_archiveType(ArchiveTypeZip)
+        , m_state(ReadStateHeader)
 {
 }
 
@@ -44,95 +44,129 @@ CliPlugin::~CliPlugin()
 {
 }
 
-// #208091: infozip applies special meanings to some characters, so we
-//          need to escape them with backslashes.see match.c in
-//          infozip's source code
-QString CliPlugin::escapeFileName(const QString &fileName) const
-{
-    const QString escapedCharacters(QLatin1String("[]*?^-\\!"));
-
-    QString quoted;
-    const int len = fileName.length();
-    const QLatin1Char backslash('\\');
-    quoted.reserve(len * 2);
-
-    for (int i = 0; i < len; ++i) {
-        if (escapedCharacters.contains(fileName.at(i))) {
-            quoted.append(backslash);
-        }
-
-        quoted.append(fileName.at(i));
-    }
-
-    return quoted;
-}
-
 ParameterList CliPlugin::parameterList() const
 {
     static ParameterList p;
 
     if (p.isEmpty()) {
-        p[CaptureProgress] = false;
-        p[ListProgram] = QStringList() << QLatin1String( "zipinfo" );
-        p[ExtractProgram] = QStringList() << QLatin1String( "unzip" );
-        p[DeleteProgram] = p[AddProgram] = QStringList() << QLatin1String( "zip" );
-
-        p[ListArgs] = QStringList() << QLatin1String( "-l" ) << QLatin1String( "-T" ) << QLatin1String( "$Archive" );
+        //p[CaptureProgress] = true;
+        //p[ListProgram] = p[ExtractProgram] = p[DeleteProgram] = p[AddProgram] = QStringList() << QLatin1String( "7z" ) << QLatin1String( "7za" ) << QLatin1String( "7zr" );
+        p[ListProgram] = p[ExtractProgram] = QStringList() << QLatin1String( "7z" ) << QLatin1String( "7za" );
+	p[DeleteProgram] = p[AddProgram] = QStringList() << QLatin1String( "zip" );
+	p[DeleteArgs] = QStringList() << QLatin1String( "-d" ) << QLatin1String( "$Archive" ) << QLatin1String( "$Files" );
+	p[AddArgs] = QStringList() << QLatin1String( "-r" ) << QLatin1String( "$Archive" ) << QLatin1String( "$Files" );
+        p[ListArgs] = QStringList() << QLatin1String( "l" ) << QLatin1String( "-slt" ) << QLatin1String( "$Archive" );
         p[ExtractArgs] = QStringList() << QLatin1String( "$PreservePathSwitch" ) << QLatin1String( "$PasswordSwitch" ) << QLatin1String( "$Archive" ) << QLatin1String( "$Files" );
-        p[PreservePathSwitch] = QStringList() << QLatin1String( "" ) << QLatin1String( "-j" );
-        p[PasswordSwitch] = QStringList() << QLatin1String( "-P$Password" );
-
-        p[DeleteArgs] = QStringList() << QLatin1String( "-d" ) << QLatin1String( "$Archive" ) << QLatin1String( "$Files" );
+        p[PreservePathSwitch] = QStringList() << QLatin1String( "x" ) << QLatin1String( "e" );
+        p[PasswordSwitch] = QStringList() << QLatin1String( "-p$Password" );
+        p[FileExistsExpression] = QLatin1String( "already exists. Overwrite with" );
+        p[WrongPasswordPatterns] = QStringList() << QLatin1String( "Wrong password" );
 
-        p[FileExistsExpression] = QLatin1String( "^replace (.+)\\?" );
         p[FileExistsInput] = QStringList()
-                             << QLatin1String( "y" ) //overwrite
-                             << QLatin1String( "n" ) //skip
+                             << QLatin1String( "Y" ) //overwrite
+                             << QLatin1String( "N" )//skip
                              << QLatin1String( "A" ) //overwrite all
-                             << QLatin1String( "N" ) //autoskip
+                             << QLatin1String( "S" ) //autoskip
+                             << QLatin1String( "Q" ) //cancel
                              ;
 
-        p[AddArgs] = QStringList() << QLatin1String( "-r" ) << QLatin1String( "$Archive" ) << QLatin1String( "$Files" );
-
-        p[PasswordPromptPattern] = QLatin1String(" password: ");
-        p[WrongPasswordPatterns] = QStringList() << QLatin1String( "incorrect password" );
-        //p[ExtractionFailedPatterns] = QStringList() << "CRC failed";
+        p[PasswordPromptPattern] = QLatin1String("Enter password \\(will not be echoed\\) :");
     }
+
     return p;
 }
 
-bool CliPlugin::readListLine(const QString &line)
+bool CliPlugin::readListLine(const QString& line)
 {
-    static const QRegExp entryPattern(QLatin1String(
-        "^(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\d{8}).(\\d{6})\\s+(.+)$") );
-
-    switch (m_status) {
-    case Header:
-        m_status = Entry;
+    static const QLatin1String archiveInfoDelimiter1("--"); // 7z 9.13+
+    static const QLatin1String archiveInfoDelimiter2("----"); // 7z 9.04
+    static const QLatin1String entryInfoDelimiter("----------");
+
+    switch (m_state) {
+    case ReadStateHeader:
+        if (line.startsWith(QLatin1String("Listing archive:"))) {
+            kDebug() << "Archive name: "
+                     << line.right(line.size() - 16).trimmed();
+        } else if ((line == archiveInfoDelimiter1) ||
+                   (line == archiveInfoDelimiter2)) {
+            m_state = ReadStateArchiveInformation;
+        } else if (line.contains(QLatin1String( "Error:" ))) {
+            kDebug() << line.mid(6);
+        }
         break;
-    case Entry:
-        if (entryPattern.indexIn(line) != -1) {
-            ArchiveEntry e;
-            e[Permissions] = entryPattern.cap(1);
-
-            // #280354: infozip may not show the right attributes for a given directory, so an entry
-            //          ending with '/' is actually more reliable than 'd' bein in the attributes.
-            e[IsDirectory] = entryPattern.cap(10).endsWith(QLatin1Char('/'));
-
-            e[Size] = entryPattern.cap(4).toInt();
-            QString status = entryPattern.cap(5);
-            if (status[0].isUpper()) {
-                e[IsPasswordProtected] = true;
+
+    case ReadStateArchiveInformation:
+        if (line == entryInfoDelimiter) {
+            m_state = ReadStateEntryInformation;
+        } else if (line.startsWith(QLatin1String("Type ="))) {
+            const QString type = line.mid(7).trimmed();
+            kDebug() << "Archive type: " << type;
+
+            if (type == QLatin1String("7z")) {
+                m_archiveType = ArchiveType7z;
+            } else if (type == QLatin1String("BZip2")) {
+                m_archiveType = ArchiveTypeBZip2;
+            } else if (type == QLatin1String("GZip")) {
+                m_archiveType = ArchiveTypeGZip;
+            } else if (type == QLatin1String("Tar")) {
+                m_archiveType = ArchiveTypeTar;
+            } else if (type == QLatin1String("Zip")) {
+                m_archiveType = ArchiveTypeZip;
+            } else if (type == QLatin1String("zip")) {
+                m_archiveType = ArchiveTypeZip;
+            } else {
+                // Should not happen
+                kWarning() << "Unsupported archive type";
+                return false;
             }
-            e[CompressedSize] = entryPattern.cap(6).toInt();
+        }
 
-            const QDateTime ts(QDate::fromString(entryPattern.cap(8), QLatin1String( "yyyyMMdd" )),
-                               QTime::fromString(entryPattern.cap(9), QLatin1String( "hhmmss" )));
-            e[Timestamp] = ts;
+        break;
 
-            e[FileName] = e[InternalID] = entryPattern.cap(10);
-            emit entry(e);
-        }
+    case ReadStateEntryInformation:
+        if (line.startsWith(QLatin1String("Path ="))) {
+            const QString entryFilename =
+                QDir::fromNativeSeparators(line.mid(6).trimmed());
+            m_currentArchiveEntry.clear();
+            m_currentArchiveEntry[FileName] = entryFilename;
+            m_currentArchiveEntry[InternalID] = entryFilename;
+        } else if (line.startsWith(QLatin1String("Size = "))) {
+            m_currentArchiveEntry[ Size ] = line.mid(7).trimmed();
+        } else if (line.startsWith(QLatin1String("Packed Size = "))) {
+            m_currentArchiveEntry[CompressedSize] = line.mid(14).trimmed();
+        } else if (line.startsWith(QLatin1String("Modified = "))) {
+            m_currentArchiveEntry[ Timestamp ] =
+                QDateTime::fromString(line.mid(11).trimmed(),
+                                      QLatin1String( "yyyy-MM-dd hh:mm:ss" ));
+        } else if (line.startsWith(QLatin1String("CRC = "))) {
+            m_currentArchiveEntry[ CRC ] = line.mid(6).trimmed();
+        } else if (line.startsWith(QLatin1String("Method = "))) {
+            m_currentArchiveEntry[ Method ] = line.mid(9).trimmed();
+        } else if (line.startsWith(QLatin1String("Encrypted = ")) &&
+                   line.size() >= 13) {
+            m_currentArchiveEntry[ IsPasswordProtected ] = (line.at(12) == QLatin1Char( '+' ));
+        } else if (line.startsWith(QLatin1String("Attributes = "))) {
+            const QString attributes = line.mid(13).trimmed();
+
+            const bool isDirectory = attributes.startsWith(QLatin1Char( 'D' ));
+            m_currentArchiveEntry[ IsDirectory ] = isDirectory;
+            if (isDirectory) {
+                const QString directoryName =
+                    m_currentArchiveEntry[FileName].toString();
+                if (!directoryName.endsWith(QLatin1Char( '/' ))) {
+                    const bool isPasswordProtected = (line.at(12) == QLatin1Char( '+' ));
+                    m_currentArchiveEntry[FileName] =
+                        m_currentArchiveEntry[InternalID] = QString(directoryName + QLatin1Char( '/' ));
+                    m_currentArchiveEntry[ IsPasswordProtected ] =
+                        isPasswordProtected;
+                }
+            }
+            m_currentArchiveEntry[ Permissions ] = attributes.mid(1);
+        } else if (line.startsWith(QLatin1String("Version = "))) {
+            if (m_currentArchiveEntry.contains(FileName)) {
+                emit entry(m_currentArchiveEntry);
+	    }
+	}
         break;
     }
 
@@ -141,3 +175,4 @@ bool CliPlugin::readListLine(const QStri
 
 KERFUFFLE_EXPORT_PLUGIN(CliPlugin)
 
+#include "cliplugin.moc"
--- ark-4.11.2.orig/plugins/clizipplugin/cliplugin.h
+++ ark-4.11.2/plugins/clizipplugin/cliplugin.h
@@ -1,7 +1,8 @@
 /*
  * ark -- archiver for the KDE project
  *
- * Copyright (C) 2011 Raphael Kubo da Costa <rakuco@FreeBSD.org>
+ * Copyright (C) 2009 Harald Hvaal <haraldhv@stud.ntnu.no>
+ * Copyright (C) 2009-2010 Raphael Kubo da Costa <rakuco@FreeBSD.org>
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License
@@ -16,8 +17,10 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ *
  */
 
+
 #ifndef CLIPLUGIN_H
 #define CLIPLUGIN_H
 
@@ -28,20 +31,31 @@ class CliPlugin : public Kerfuffle::CliI
     Q_OBJECT
 
 public:
-    explicit CliPlugin(QObject *parent, const QVariantList &args);
+    explicit CliPlugin(QObject *parent, const QVariantList & args);
     virtual ~CliPlugin();
 
-    virtual QString escapeFileName(const QString &fileName) const;
-
+protected:
     virtual Kerfuffle::ParameterList parameterList() const;
-
     virtual bool readListLine(const QString &line);
 
 private:
-    enum {
-        Header = 0,
-        Entry
-    } m_status;
+    enum ArchiveType {
+	ArchiveType7z = 0,
+	ArchiveTypeBZip2,
+	ArchiveTypeGZip,
+	ArchiveTypeTar,
+	ArchiveTypeZip
+    };
+
+    enum ReadState {
+	ReadStateHeader = 0,
+	ReadStateArchiveInformation,
+	ReadStateEntryInformation
+    };
+
+    ArchiveType m_archiveType;
+    Kerfuffle::ArchiveEntry m_currentArchiveEntry;
+    ReadState m_state;
 };
 
 #endif // CLIPLUGIN_H
